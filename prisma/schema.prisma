generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model feedback {
  id                             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content                        String   @db.VarChar(255)
  mentor_id                      String?  @db.Uuid
  student_id                     String?  @db.Uuid
  parent_id                      String?  @db.Uuid
  created_at                     DateTime @default(now()) @db.Timestamp(6)
  updated_at                     DateTime @default(now()) @db.Timestamp(6)
  user_feedback_mentor_idTouser  user?    @relation("feedback_mentor_idTouser", fields: [mentor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_feedback_parent_idTouser  user?    @relation("feedback_parent_idTouser", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_feedback_student_idTouser user?    @relation("feedback_student_idTouser", fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profile {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name String   @db.VarChar(255)
  last_name  String   @db.VarChar(255)
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model request {
  id                            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description                   String   @db.VarChar(255)
  student_id                    String?  @db.Uuid
  parent_id                     String?  @db.Uuid
  created_at                    DateTime @default(now()) @db.Timestamp(6)
  updated_at                    DateTime @default(now()) @db.Timestamp(6)
  user_request_parent_idTouser  user?    @relation("request_parent_idTouser", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_request_student_idTouser user?    @relation("request_student_idTouser", fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  id                            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date                          DateTime @db.Timestamp(6)
  mentor_id                     String?  @db.Uuid
  student_id                    String?  @db.Uuid
  created_at                    DateTime @default(now()) @db.Timestamp(6)
  updated_at                    DateTime @default(now()) @db.Timestamp(6)
  user_session_mentor_idTouser  user?    @relation("session_mentor_idTouser", fields: [mentor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_session_student_idTouser user?    @relation("session_student_idTouser", fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                              String         @unique @db.VarChar(255)
  firstName                          String?        @db.VarChar(255)
  lastName                           String?        @db.VarChar(255)
  roq_user_id                        String         @db.VarChar(255)
  tenant_id                          String         @db.VarChar(255)
  created_at                         DateTime       @default(now()) @db.Timestamp(6)
  updated_at                         DateTime       @default(now()) @db.Timestamp(6)
  feedback_feedback_mentor_idTouser  feedback[]     @relation("feedback_mentor_idTouser")
  feedback_feedback_parent_idTouser  feedback[]     @relation("feedback_parent_idTouser")
  feedback_feedback_student_idTouser feedback[]     @relation("feedback_student_idTouser")
  organization                       organization[]
  profile                            profile[]
  request_request_parent_idTouser    request[]      @relation("request_parent_idTouser")
  request_request_student_idTouser   request[]      @relation("request_student_idTouser")
  session_session_mentor_idTouser    session[]      @relation("session_mentor_idTouser")
  session_session_student_idTouser   session[]      @relation("session_student_idTouser")
}
